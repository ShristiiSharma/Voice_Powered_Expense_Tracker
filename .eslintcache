[{"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\index.js":"1","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\App.js":"2","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\context\\context.js":"3","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\styles.js":"4","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\context\\contextReducer.js":"5","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\index.js":"6","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\InfoCard.jsx":"7","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Details\\Details.jsx":"8","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Snackbar\\Snackbar.jsx":"9","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Main\\Main.jsx":"10","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Main\\styles.js":"11","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Snackbar\\styles.js":"12","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Main\\List\\List.jsx":"13","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Main\\Form\\Form.jsx":"14","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\useTransactions.js":"15","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Details\\styles.js":"16","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Main\\Form\\styles.js":"17","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\constants\\categories.js":"18","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Main\\List\\styles.js":"19","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\utils\\formatDate.js":"20"},{"size":431,"mtime":1730453985324,"results":"21","hashOfConfig":"22"},{"size":1463,"mtime":1731600674004,"results":"23","hashOfConfig":"22"},{"size":2032,"mtime":1730453985324,"results":"24","hashOfConfig":"22"},{"size":582,"mtime":1730453985324,"results":"25","hashOfConfig":"22"},{"size":583,"mtime":1730453985324,"results":"26","hashOfConfig":"22"},{"size":216,"mtime":1730453985308,"results":"27","hashOfConfig":"22"},{"size":456,"mtime":1731601521376,"results":"28","hashOfConfig":"22"},{"size":725,"mtime":1731601521401,"results":"29","hashOfConfig":"22"},{"size":797,"mtime":1730453985308,"results":"30","hashOfConfig":"22"},{"size":1351,"mtime":1731602968748,"results":"31","hashOfConfig":"22"},{"size":514,"mtime":1730453985308,"results":"32","hashOfConfig":"22"},{"size":206,"mtime":1730453985308,"results":"33","hashOfConfig":"22"},{"size":2938,"mtime":1732639160453,"results":"34","hashOfConfig":"22"},{"size":7225,"mtime":1732641129050,"results":"35","hashOfConfig":"22"},{"size":1124,"mtime":1730453985324,"results":"36","hashOfConfig":"22"},{"size":247,"mtime":1730453985308,"results":"37","hashOfConfig":"22"},{"size":247,"mtime":1730453985308,"results":"38","hashOfConfig":"22"},{"size":1693,"mtime":1730453985324,"results":"39","hashOfConfig":"22"},{"size":416,"mtime":1730453985308,"results":"40","hashOfConfig":"22"},{"size":317,"mtime":1731601521356,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"16md2mo",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\index.js",[],["86","87"],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\App.js",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\context\\context.js",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\styles.js",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\context\\contextReducer.js",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\index.js",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\InfoCard.jsx",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Details\\Details.jsx",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Snackbar\\Snackbar.jsx",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Main\\Main.jsx",["88","89","90"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { useSpeechContext } from \"@speechly/react-client\";\r\nimport { ExpenseTrackerContext } from \"../../context/context\";\r\nimport useStyles from \"./styles\";\r\nimport Form from \"./Form/Form\";\r\nimport List from \"./List/List\";\r\nimport InfoCard from \"../InfoCard\";\r\n\r\nconst ExpenseTracker = () => {\r\n  const classes = useStyles();\r\n  const { balance } = useContext(ExpenseTrackerContext);\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader title=\"Expense Tracker\" subheader=\"Powered by Web Speech API\" />\r\n      <CardContent>\r\n        <Typography align=\"center\" variant=\"h5\">\r\n          Total Balance ${balance}\r\n        </Typography>\r\n        <Typography\r\n          variant=\"subtitle1\"\r\n          style={{ lineHeight: \"1.5em\", marginTop: \"20px\" }}\r\n        >\r\n          <InfoCard />\r\n        </Typography>\r\n        <Divider className={classes.divider} />\r\n        <Form />\r\n      </CardContent>\r\n      <CardContent className={classes.cartContent}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <List />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ExpenseTracker;\r\n","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Main\\styles.js",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Snackbar\\styles.js",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Main\\List\\List.jsx",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Main\\Form\\Form.jsx",["91"],"import React, { useState, useRef, useContext, useEffect } from 'react';\r\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport Snackbar from '../../Snackbar/Snackbar';\r\nimport formatDate from '../../../utils/formatDate';\r\nimport { ExpenseTrackerContext } from '../../../context/context';\r\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\r\nimport useStyles from './styles';\r\n\r\nconst initialState = {\r\n  amount: '',\r\n  category: '',\r\n  type: 'Income',\r\n  date: formatDate(new Date()),\r\n};\r\n\r\nconst NewTransactionForm = () => {\r\n  const classes = useStyles();\r\n  const { addTransaction } = useContext(ExpenseTrackerContext);\r\n  const [formData, setFormData] = useState(initialState);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  // Refs for form fields\r\n  const typeRef = useRef(null);\r\n  const categoryRef = useRef(null);\r\n  const amountRef = useRef(null);\r\n  const dateRef = useRef(null);\r\n\r\n  // Initialize Speech Recognition only if supported\r\n  let recognition;\r\n  if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    recognition = new SpeechRecognition();\r\n    recognition.lang = 'en-US';\r\n    recognition.interimResults = false;\r\n    recognition.onresult = (event) => {\r\n      const spokenText = event.results[0][0].transcript;\r\n      parseSpeechInput(spokenText);\r\n    };\r\n  } else {\r\n    console.warn(\"Web Speech API is not supported by this browser.\");\r\n  }\r\n\r\n  const startListening = () => {\r\n    if (recognition) {\r\n      recognition.start();\r\n    } else {\r\n      alert(\"Sorry, your browser does not support the Web Speech API.\");\r\n    }\r\n  };\r\n\r\n  // Function to parse speech input and populate form fields\r\n  const parseSpeechInput = (spokenText) => {\r\n    const lowerText = spokenText.toLowerCase();\r\n\r\n    // Parse type (income or expense)\r\n    const type = lowerText.includes(\"income\") ? \"Income\" : lowerText.includes(\"expense\") ? \"Expense\" : formData.type;\r\n    setFormData((prev) => ({ ...prev, type }));\r\n    if (typeRef.current) typeRef.current.value = type;\r\n\r\n    // Parse category\r\n    const category = incomeCategories.concat(expenseCategories)\r\n      .map((c) => c.type)\r\n      .find((c) => lowerText.includes(c.toLowerCase())) || formData.category;\r\n    setFormData((prev) => ({ ...prev, category }));\r\n    if (categoryRef.current) categoryRef.current.value = category;\r\n\r\n    // Parse amount\r\n    const amountMatch = lowerText.match(/(\\d+(\\.\\d+)?)/);\r\n    const amount = amountMatch ? amountMatch[0] : formData.amount;\r\n    setFormData((prev) => ({ ...prev, amount }));\r\n    if (amountRef.current) amountRef.current.value = amount;\r\n\r\n    // Parse date\r\n    const parsedDate = parseDate(lowerText);\r\n    if (parsedDate) {\r\n      const formattedDate = formatDate(parsedDate);\r\n      setFormData((prev) => ({ ...prev, date: formattedDate }));\r\n      if (dateRef.current) dateRef.current.value = formattedDate;\r\n    }\r\n  };\r\n\r\n  // Date parsing function to handle various date formats\r\n  const parseDate = (inputText) => {\r\n    const today = new Date();\r\n    const dayNames = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r\n    \r\n    // Check for specific days of the week, e.g., \"next Monday\"\r\n    for (let i = 0; i < dayNames.length; i++) {\r\n      if (inputText.includes(`next ${dayNames[i]}`)) {\r\n        const targetDay = (i + 7 - today.getDay()) % 7 || 7; // Calculate days until next specific day\r\n        const nextDay = new Date(today);\r\n        nextDay.setDate(today.getDate() + targetDay);\r\n        return nextDay;\r\n      } else if (inputText.includes(dayNames[i])) {\r\n        const targetDay = (i + 7 - today.getDay()) % 7; // Calculate days until that day this week\r\n        const thisWeekDay = new Date(today);\r\n        thisWeekDay.setDate(today.getDate() + targetDay);\r\n        return thisWeekDay;\r\n      }\r\n    }\r\n\r\n    // Check for exact dates, e.g., \"November 15\" or \"15 November\"\r\n    const exactDateMatch = inputText.match(/\\b(\\d{1,2})[a-z]{0,2}\\s+(january|february|march|april|may|june|july|august|september|october|november|december)/);\r\n    if (exactDateMatch) {\r\n      const day = parseInt(exactDateMatch[1], 10);\r\n      const month = new Date(`${exactDateMatch[2]} 1`).getMonth();\r\n      const year = today.getFullYear();\r\n      return new Date(year, month, day);\r\n    }\r\n\r\n    return null; // Return null if no date was recognized\r\n  };\r\n\r\n  const createTransaction = () => {\r\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\r\n    addTransaction({ ...formData, amount: Number(formData.amount), id: uuidv4() });\r\n    setOpen(true);\r\n    setFormData(initialState);\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Snackbar open={open} setOpen={setOpen} />\r\n      <Grid item xs={12}>\r\n        <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\r\n          \r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Type</InputLabel>\r\n          <Select\r\n            inputRef={typeRef}\r\n            value={formData.type}\r\n            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n          >\r\n            <MenuItem value=\"Income\">Income</MenuItem>\r\n            <MenuItem value=\"Expense\">Expense</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Category</InputLabel>\r\n          <Select\r\n            inputRef={categoryRef}\r\n            value={formData.category}\r\n            onChange={(e) => setFormData({ ...formData, category: e.target.value })}\r\n          >\r\n            {(formData.type === 'Income' ? incomeCategories : expenseCategories).map((c) => (\r\n              <MenuItem key={c.type} value={c.type}>\r\n                {c.type}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <TextField\r\n          inputRef={amountRef}\r\n          type=\"number\"\r\n          label=\"Amount\"\r\n          value={formData.amount}\r\n          onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\r\n          fullWidth\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <TextField\r\n          inputRef={dateRef}\r\n          fullWidth\r\n          label=\"Date\"\r\n          type=\"date\"\r\n          value={formData.date}\r\n          onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value) })}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} style={{ marginBottom: '0.5px' }}>\r\n        <Button variant=\"contained\" color=\"primary\" fullWidth onClick={startListening}>\r\n          Record Transaction\r\n        </Button>\r\n      </Grid>\r\n      <Grid item xs={12} style={{ marginTop: '2px' }}>\r\n        <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>\r\n          Create\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default NewTransactionForm;\r\n","C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\useTransactions.js",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Details\\styles.js",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Main\\Form\\styles.js",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\constants\\categories.js",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\components\\Main\\List\\styles.js",[],"C:\\ExpenseTracker\\speechly_expense_tracker_project\\src\\utils\\formatDate.js",["92"],"export default (date) => {\r\n  const d = new Date(date);\r\n  let month = `${d.getMonth() + 1}`;\r\n  let day = `${d.getDate()}`;\r\n  const year = d.getFullYear();\r\n\r\n  if (month.length < 2) {\r\n    month = `0${month}`;\r\n  }\r\n  if (day.length < 2) {\r\n    day = `0${day}`;\r\n  }\r\n\r\n  return [year, month, day].join(\"-\");\r\n};\r\n",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":25},{"ruleId":"97","severity":1,"message":"101","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":36},{"ruleId":"97","severity":1,"message":"102","line":10,"column":10,"nodeType":"99","messageId":"100","endLine":10,"endColumn":26},{"ruleId":"97","severity":1,"message":"101","line":1,"column":47,"nodeType":"99","messageId":"100","endLine":1,"endColumn":56},{"ruleId":"103","severity":1,"message":"104","line":1,"column":1,"nodeType":"105","endLine":15,"endColumn":3},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useSpeechContext' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]